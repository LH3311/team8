library(tidyverse)
library(phyloseq)
load("pd_rare.Rdata")
library(tidyverse)
library(phyloseq)
#Loading rarified PD phyloseq object
load("pd_rare.Rdata")
pd_only_rare <- subset_samples(pd_rare, Disease == "PD")
control_rare <- subset_samples(pd_rare, Disease == "Control")
#Combining metadata and estimate_richness data
pd_only_wdiv <- data.frame(sample_data(pd_only_rare), estimate_richness(pd_only_rare))
control_wdiv <- data.frame(sample_data(control_rare), estimate_richness(control_rare))
#Defining predictor and response variable
pd_predictors <- colnames(pd_only_wdiv[, 38:98])
control_predictors <- colnames(control_wdiv[, 38:98])
response_variables <- c("Shannon", "Chao1", "ACE", "Simpson", "InvSimpson", "Fisher")
# Create formulas for linear model
pd_formulas <- lapply(response_variables, function(response_var) {
as.formula(paste(response_var, "~", paste(pd_predictors, collapse = "+")))
})
control_formulas <- lapply(response_variables, function(response_var) {
as.formula(paste(response_var, "~", paste(control_predictors, collapse = "+")))
})
# Fit linear models
pd_models <- lapply(pd_formulas, function(formula) {
lm(formula, data = pd_only_wdiv)
})
control_models <- lapply(control_formulas, function(formula) {
lm(formula, data = control_wdiv)
})
#For loop iterates through the two linear models to retrieve and print each alpha diversity metric
for (i in seq_along(pd_models)) {
cat("Summary of Model for Response Variable:", response_variables[i], "\n")
print(summary(pd_models[[i]]))
cat("\n")
}
for (i in seq_along(control_models)) {
cat("Summary of Model for Response Variable:", response_variables[i], "\n")
print(summary(control_models[[i]]))
cat("\n")
}
#Above code modified to instead store all the calculated p_values and their respective response variable
pd_p_values_table <- data.frame(Response_Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE)
control_p_values_table <- data.frame(Response_Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE)
# Loop through each model and extract p-values
for (i in seq_along(pd_models)) {
model_summary <- summary(pd_models[[i]])
pd_p_values <- coef(model_summary)[, "Pr(>|t|)"]
response_variable <- response_variables[i]
pd_p_values_table <- rbind(pd_p_values_table, data.frame(Response_Variable = response_variable,
P_Value = pd_p_values))
cat("Summary of Model for Response Variable:", response_variable, "\n")
print(model_summary)
cat("\n")
}
for (i in seq_along(control_models)) {
model_summary <- summary(control_models[[i]])
control_p_values <- coef(model_summary)[, "Pr(>|t|)"]
response_variable <- response_variables[i]
control_p_values_table <- rbind(control_p_values_table, data.frame(Response_Variable = response_variable,
P_Value = control_p_values))
cat("Summary of Model for Response Variable:", response_variable, "\n")
print(model_summary)
cat("\n")
}
# Creating empty list to store significant p values retrieved from for loops below
pd_significant_p_values <- data.frame()
control_significant_p_values <- data.frame()
# Access and extract significant p-values from each model
for (i in seq_along(pd_models)) {
pd_model_summary <- summary(pd_models[[i]])
pd_coefficients <- as.data.frame(coef(pd_model_summary))
pd_coefficients$predictors = rownames(pd_coefficients)
pd_pval_filtered = pd_coefficients %>%
filter(pd_coefficients$`Pr(>|t|)` < 0.05)
if (dim(pd_pval_filtered)[1] != 0 ){
pd_pval_filtered$response = response_variables[[i]]
pd_significant_p_values <- rbind(pd_significant_p_values,pd_pval_filtered)
} else{}
}
for (i in seq_along(control_models)) {
#i=4
control_model_summary <- summary(control_models[[i]])
control_coefficients <- as.data.frame(coef(control_model_summary))
control_coefficients$predictors = rownames(control_coefficients)
control_pval_filtered = control_coefficients %>%
filter(control_coefficients$`Pr(>|t|)` < 0.05)
if (dim(control_pval_filtered)[1] != 0 ){
control_pval_filtered$response = response_variables[[i]]
control_significant_p_values <- rbind(control_significant_p_values,control_pval_filtered)
} else{}
}
beta <- lm(Simpson ~ Beta_carotene, control_wdiv)
summary(beta)
beta <- lm(Fisher ~ Non_alcoholic_bevs, control_wdiv)
summary(beta)
beta <- lm(Chao1 ~ Non_alcoholic_bevs, control_wdiv)
summary(beta)
summary(beta)
beta <- lm(ACE ~ Non_alcoholic_bevs, control_wdiv)
summary(beta)
